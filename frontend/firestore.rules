rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAdmin() {
      return request.auth != null && request.auth.token.email in ['ananya.meseret@gmail.com', 'admastravel@gmail.com'];
    }

    // Allow users to read and write their own data
    match /users/{userId} {
      // Allow users to read and write their own document
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow access to user's settings subcollection
      match /settings/{document} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Allow access to user's bookings subcollection
      match /bookings/{bookingId} {
        allow read, write: if request.auth != null && (request.auth.uid == userId || isAdmin());
      }
      
      // Allow access to all other subcollections under user's document
      match /{collection}/{document} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Allow authenticated users to create bookings
    match /bookings/{bookingId} {
      // Allow admin to list all bookings
      allow list: if isAdmin();
      // Allow admin to get any booking
      allow get: if isAdmin();
      // Allow users to create their own bookings
      allow create: if request.auth != null && 
                      request.resource.data.userId == request.auth.uid;
      // Allow users to read their own bookings, and admin to read all
      allow read: if request.auth != null && 
                    (resource.data.userId == request.auth.uid || isAdmin());
      // Allow users to update their own bookings, and admin to update all
      allow update: if request.auth != null && 
                    (resource.data.userId == request.auth.uid || isAdmin());
      // Allow only admin to delete bookings
      allow delete: if isAdmin();
    }
  }
} 